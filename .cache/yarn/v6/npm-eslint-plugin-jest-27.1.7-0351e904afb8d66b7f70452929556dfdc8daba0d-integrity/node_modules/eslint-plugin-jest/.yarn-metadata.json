{
  "manifest": {
    "name": "eslint-plugin-jest",
    "version": "27.1.7",
    "description": "ESLint rules for Jest",
    "keywords": [
      "eslint",
      "eslintplugin",
      "eslint-plugin"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/jest-community/eslint-plugin-jest.git"
    },
    "license": "MIT",
    "author": {
      "name": "Jonathan Kim",
      "email": "hello@jkimbo.com",
      "url": "jkimbo.com"
    },
    "main": "lib/",
    "files": [
      "docs/",
      "lib/"
    ],
    "scripts": {
      "build": "babel --extensions .js,.ts src --out-dir lib --copy-files && rimraf lib/__tests__ 'lib/**/__tests__'",
      "_postinstall": "is-ci || husky install",
      "lint": "eslint . --ignore-pattern '!.eslintrc.js' --ext js,ts",
      "prepack": "rimraf lib && yarn build",
      "prepublishOnly": "pinst --disable",
      "prettier:check": "prettier --check 'docs/**/*.md' README.md '.github/**' package.json tsconfig.json src/globals.json .yarnrc.yml",
      "prettier:write": "prettier --write 'docs/**/*.md' README.md '.github/**' package.json tsconfig.json src/globals.json .yarnrc.yml",
      "postpublish": "pinst --enable",
      "test": "jest",
      "tools:regenerate-docs": "yarn prepack && eslint-doc-generator",
      "typecheck": "tsc -p ."
    },
    "commitlint": {
      "extends": [
        "@commitlint/config-conventional"
      ]
    },
    "lint-staged": {
      "*.{js,ts}": "eslint --fix",
      "*.{md,json,yml}": "prettier --write"
    },
    "prettier": {
      "arrowParens": "avoid",
      "endOfLine": "auto",
      "proseWrap": "always",
      "singleQuote": true,
      "trailingComma": "all"
    },
    "release": {
      "branches": [
        "main",
        {
          "name": "next",
          "prerelease": true
        }
      ],
      "plugins": [
        "@semantic-release/commit-analyzer",
        "@semantic-release/release-notes-generator",
        "@semantic-release/changelog",
        "@semantic-release/npm",
        "@semantic-release/git",
        "@semantic-release/github"
      ]
    },
    "jest": {
      "coverageThreshold": {
        "global": {
          "branches": 100,
          "functions": 100,
          "lines": 100,
          "statements": 100
        }
      },
      "projects": [
        {
          "displayName": "test",
          "testPathIgnorePatterns": [
            "<rootDir>/lib/.*",
            "<rootDir>/src/rules/__tests__/fixtures/*",
            "<rootDir>/src/rules/__tests__/test-utils.ts"
          ]
        },
        {
          "displayName": "lint",
          "runner": "jest-runner-eslint",
          "testMatch": [
            "<rootDir>/**/*.{js,ts}"
          ],
          "testPathIgnorePatterns": [
            "<rootDir>/lib/.*"
          ]
        }
      ]
    },
    "dependencies": {
      "@typescript-eslint/utils": "^5.10.0"
    },
    "devDependencies": {
      "@babel/cli": "^7.4.4",
      "@babel/core": "^7.4.4",
      "@babel/preset-env": "^7.4.4",
      "@babel/preset-typescript": "^7.3.3",
      "@commitlint/cli": "^17.0.3",
      "@commitlint/config-conventional": "^17.0.3",
      "@schemastore/package": "^0.0.6",
      "@semantic-release/changelog": "^6.0.0",
      "@semantic-release/git": "^10.0.0",
      "@tsconfig/node14": "^1.0.3",
      "@types/dedent": "^0.7.0",
      "@types/eslint": "^8.4.6",
      "@types/jest": "^29.0.0",
      "@types/node": "^14.18.26",
      "@types/prettier": "^2.0.0",
      "@typescript-eslint/eslint-plugin": "^5.0.0",
      "@typescript-eslint/parser": "^5.0.0",
      "babel-jest": "^29.0.0",
      "babel-plugin-replace-ts-export-assignment": "^0.0.2",
      "dedent": "^0.7.0",
      "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0",
      "eslint-config-prettier": "^8.3.0",
      "eslint-doc-generator": "^1.0.0",
      "eslint-plugin-eslint-comments": "^3.1.2",
      "eslint-plugin-eslint-plugin": "^5.0.6",
      "eslint-plugin-import": "^2.25.1",
      "eslint-plugin-node": "^11.0.0",
      "eslint-plugin-prettier": "^4.2.1",
      "eslint-remote-tester": "^3.0.0",
      "eslint-remote-tester-repositories": "~0.0.5",
      "husky": "^8.0.1",
      "is-ci": "^3.0.0",
      "jest": "^29.0.0",
      "jest-runner-eslint": "^1.1.0",
      "lint-staged": "^13.0.3",
      "markdown-link-check": "^3.10.2",
      "pinst": "^3.0.0",
      "prettier": "^2.0.5",
      "rimraf": "^3.0.0",
      "semantic-release": "^19.0.0",
      "semver": "^7.3.5",
      "ts-node": "^10.2.1",
      "typescript": "^4.4.0"
    },
    "peerDependencies": {
      "@typescript-eslint/eslint-plugin": "^5.0.0",
      "eslint": "^7.0.0 || ^8.0.0"
    },
    "peerDependenciesMeta": {
      "@typescript-eslint/eslint-plugin": {
        "optional": true
      },
      "jest": {
        "optional": true
      }
    },
    "packageManager": "yarn@3.3.0",
    "engines": {
      "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/agrawe/.cache/yarn/v6/npm-eslint-plugin-jest-27.1.7-0351e904afb8d66b7f70452929556dfdc8daba0d-integrity/node_modules/eslint-plugin-jest/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <a href=\"https://eslint.org/\">\n    <img height=\"150\" src=\"https://eslint.org/assets/images/logo/eslint-logo-color.svg\">\n  </a>\n  <a href=\"https://facebook.github.io/jest/\">\n    <img width=\"150\" height=\"150\" vspace=\"\" hspace=\"25\" src=\"https://jestjs.io/img/jest.png\">\n  </a>\n  <h1>eslint-plugin-jest</h1>\n  <p>ESLint plugin for Jest</p>\n</div>\n\n[![Actions Status](https://github.com/jest-community/eslint-plugin-jest/actions/workflows/nodejs.yml/badge.svg?branch=main)](https://github.com/jest-community/eslint-plugin-jest/actions)\n\n## Installation\n\n```bash\nyarn add --dev eslint eslint-plugin-jest\n```\n\n**Note:** If you installed ESLint globally then you must also install\n`eslint-plugin-jest` globally.\n\n## Usage\n\nAdd `jest` to the plugins section of your `.eslintrc` configuration file. You\ncan omit the `eslint-plugin-` prefix:\n\n```json\n{\n  \"plugins\": [\"jest\"]\n}\n```\n\nThen configure the rules you want to use under the rules section.\n\n```json\n{\n  \"rules\": {\n    \"jest/no-disabled-tests\": \"warn\",\n    \"jest/no-focused-tests\": \"error\",\n    \"jest/no-identical-title\": \"error\",\n    \"jest/prefer-to-have-length\": \"warn\",\n    \"jest/valid-expect\": \"error\"\n  }\n}\n```\n\nYou can also tell ESLint about the environment variables provided by Jest by\ndoing:\n\n```json\n{\n  \"env\": {\n    \"jest/globals\": true\n  }\n}\n```\n\nThis is included in all configs shared by this plugin, so can be omitted if\nextending them.\n\n#### Aliased Jest globals\n\nYou can tell this plugin about any global Jests you have aliased using the\n`globalAliases` setting:\n\n```json\n{\n  \"settings\": {\n    \"jest\": {\n      \"globalAliases\": {\n        \"describe\": [\"context\"],\n        \"fdescribe\": [\"fcontext\"],\n        \"xdescribe\": [\"xcontext\"]\n      }\n    }\n  }\n}\n```\n\n### Running rules only on test-related files\n\nThe rules provided by this plugin assume that the files they are checking are\ntest-related. This means it's generally not suitable to include them in your\ntop-level configuration as that applies to all files being linted which can\ninclude source files.\n\nYou can use\n[overrides](https://eslint.org/docs/user-guide/configuring/configuration-files#how-do-overrides-work)\nto have ESLint apply additional rules to specific files:\n\n```json\n{\n  \"extends\": [\"eslint:recommended\"],\n  \"overrides\": [\n    {\n      \"files\": [\"test/**\"],\n      \"plugins\": [\"jest\"],\n      \"extends\": [\"plugin:jest/recommended\"],\n      \"rules\": { \"jest/prefer-expect-assertions\": \"off\" }\n    }\n  ],\n  \"rules\": {\n    \"indent\": [\"error\", 2]\n  }\n}\n```\n\n### Jest `version` setting\n\nThe behaviour of some rules (specifically [`no-deprecated-functions`][]) change\ndepending on the version of Jest being used.\n\nBy default, this plugin will attempt to determine to locate Jest using\n`require.resolve`, meaning it will start looking in the closest `node_modules`\nfolder to the file being linted and work its way up.\n\nSince we cache the automatically determined version, if you're linting\nsub-folders that have different versions of Jest, you may find that the wrong\nversion of Jest is considered when linting. You can work around this by\nproviding the Jest version explicitly in nested ESLint configs:\n\n```json\n{\n  \"settings\": {\n    \"jest\": {\n      \"version\": 27\n    }\n  }\n}\n```\n\nTo avoid hard-coding a number, you can also fetch it from the installed version\nof Jest if you use a JavaScript config file such as `.eslintrc.js`:\n\n```js\nmodule.exports = {\n  settings: {\n    jest: {\n      version: require('jest/package.json').version,\n    },\n  },\n};\n```\n\n## Shareable configurations\n\n### Recommended\n\nThis plugin exports a recommended configuration that enforces good testing\npractices.\n\nTo enable this configuration use the `extends` property in your `.eslintrc`\nconfig file:\n\n```json\n{\n  \"extends\": [\"plugin:jest/recommended\"]\n}\n```\n\n### Style\n\nThis plugin also exports a configuration named `style`, which adds some\nstylistic rules, such as `prefer-to-be-null`, which enforces usage of `toBeNull`\nover `toBe(null)`.\n\nTo enable this configuration use the `extends` property in your `.eslintrc`\nconfig file:\n\n```json\n{\n  \"extends\": [\"plugin:jest/style\"]\n}\n```\n\nSee\n[ESLint documentation](https://eslint.org/docs/user-guide/configuring/configuration-files#extending-configuration-files)\nfor more information about extending configuration files.\n\n### All\n\nIf you want to enable all rules instead of only some you can do so by adding the\n`all` configuration to your `.eslintrc` config file:\n\n```json\n{\n  \"extends\": [\"plugin:jest/all\"]\n}\n```\n\nWhile the `recommended` and `style` configurations only change in major versions\nthe `all` configuration may change in any release and is thus unsuited for\ninstallations requiring long-term consistency.\n\n## Rules\n\n<!-- begin auto-generated rules list -->\n\n💼\n[Configurations](https://github.com/jest-community/eslint-plugin-jest/blob/main/README.md#shareable-configurations)\nenabled in.\\\n⚠️ [Configurations](https://github.com/jest-community/eslint-plugin-jest/blob/main/README.md#shareable-configurations)\nset to warn in.\\\n✅ Set in the `recommended`\n[configuration](https://github.com/jest-community/eslint-plugin-jest/blob/main/README.md#shareable-configurations).\\\n🎨 Set in the `style` [configuration](https://github.com/jest-community/eslint-plugin-jest/blob/main/README.md#shareable-configurations).\\\n🔧 Automatically fixable by the\n[`--fix` CLI option](https://eslint.org/docs/user-guide/command-line-interface#--fix).\\\n💡 Manually fixable by [editor suggestions](https://eslint.org/docs/developer-guide/working-with-rules#providing-suggestions).\\\n❌ Deprecated.\n\n| Name                                                                         | Description                                                         | 💼  | ⚠️  | 🔧  | 💡  | ❌  |\n| :--------------------------------------------------------------------------- | :------------------------------------------------------------------ | :-- | :-- | :-- | :-- | :-- |\n| [consistent-test-it](docs/rules/consistent-test-it.md)                       | Enforce `test` and `it` usage conventions                           |     |     | 🔧  |     |     |\n| [expect-expect](docs/rules/expect-expect.md)                                 | Enforce assertion to be made in a test body                         |     | ✅  |     |     |     |\n| [max-expects](docs/rules/max-expects.md)                                     | Enforces a maximum number assertion calls in a test body            |     |     |     |     |     |\n| [max-nested-describe](docs/rules/max-nested-describe.md)                     | Enforces a maximum depth to nested describe calls                   |     |     |     |     |     |\n| [no-alias-methods](docs/rules/no-alias-methods.md)                           | Disallow alias methods                                              | ✅  | 🎨  | 🔧  |     |     |\n| [no-commented-out-tests](docs/rules/no-commented-out-tests.md)               | Disallow commented out tests                                        |     | ✅  |     |     |     |\n| [no-conditional-expect](docs/rules/no-conditional-expect.md)                 | Disallow calling `expect` conditionally                             | ✅  |     |     |     |     |\n| [no-conditional-in-test](docs/rules/no-conditional-in-test.md)               | Disallow conditional logic in tests                                 |     |     |     |     |     |\n| [no-deprecated-functions](docs/rules/no-deprecated-functions.md)             | Disallow use of deprecated functions                                | ✅  |     | 🔧  |     |     |\n| [no-disabled-tests](docs/rules/no-disabled-tests.md)                         | Disallow disabled tests                                             |     | ✅  |     |     |     |\n| [no-done-callback](docs/rules/no-done-callback.md)                           | Disallow using a callback in asynchronous tests and hooks           | ✅  |     |     | 💡  |     |\n| [no-duplicate-hooks](docs/rules/no-duplicate-hooks.md)                       | Disallow duplicate setup and teardown hooks                         |     |     |     |     |     |\n| [no-export](docs/rules/no-export.md)                                         | Disallow using `exports` in files containing tests                  | ✅  |     |     |     |     |\n| [no-focused-tests](docs/rules/no-focused-tests.md)                           | Disallow focused tests                                              | ✅  |     |     | 💡  |     |\n| [no-hooks](docs/rules/no-hooks.md)                                           | Disallow setup and teardown hooks                                   |     |     |     |     |     |\n| [no-identical-title](docs/rules/no-identical-title.md)                       | Disallow identical titles                                           | ✅  |     |     |     |     |\n| [no-if](docs/rules/no-if.md)                                                 | Disallow conditional logic                                          |     |     |     |     | ❌  |\n| [no-interpolation-in-snapshots](docs/rules/no-interpolation-in-snapshots.md) | Disallow string interpolation inside snapshots                      | ✅  |     |     |     |     |\n| [no-jasmine-globals](docs/rules/no-jasmine-globals.md)                       | Disallow Jasmine globals                                            | ✅  |     | 🔧  |     |     |\n| [no-large-snapshots](docs/rules/no-large-snapshots.md)                       | Disallow large snapshots                                            |     |     |     |     |     |\n| [no-mocks-import](docs/rules/no-mocks-import.md)                             | Disallow manually importing from `__mocks__`                        | ✅  |     |     |     |     |\n| [no-restricted-jest-methods](docs/rules/no-restricted-jest-methods.md)       | Disallow specific `jest.` methods                                   |     |     |     |     |     |\n| [no-restricted-matchers](docs/rules/no-restricted-matchers.md)               | Disallow specific matchers & modifiers                              |     |     |     |     |     |\n| [no-standalone-expect](docs/rules/no-standalone-expect.md)                   | Disallow using `expect` outside of `it` or `test` blocks            | ✅  |     |     |     |     |\n| [no-test-prefixes](docs/rules/no-test-prefixes.md)                           | Require using `.only` and `.skip` over `f` and `x`                  | ✅  |     | 🔧  |     |     |\n| [no-test-return-statement](docs/rules/no-test-return-statement.md)           | Disallow explicitly returning from tests                            |     |     |     |     |     |\n| [prefer-called-with](docs/rules/prefer-called-with.md)                       | Suggest using `toBeCalledWith()` or `toHaveBeenCalledWith()`        |     |     |     |     |     |\n| [prefer-comparison-matcher](docs/rules/prefer-comparison-matcher.md)         | Suggest using the built-in comparison matchers                      |     |     | 🔧  |     |     |\n| [prefer-each](docs/rules/prefer-each.md)                                     | Prefer using `.each` rather than manual loops                       |     |     |     |     |     |\n| [prefer-equality-matcher](docs/rules/prefer-equality-matcher.md)             | Suggest using the built-in equality matchers                        |     |     |     | 💡  |     |\n| [prefer-expect-assertions](docs/rules/prefer-expect-assertions.md)           | Suggest using `expect.assertions()` OR `expect.hasAssertions()`     |     |     |     | 💡  |     |\n| [prefer-expect-resolves](docs/rules/prefer-expect-resolves.md)               | Prefer `await expect(...).resolves` over `expect(await ...)` syntax |     |     | 🔧  |     |     |\n| [prefer-hooks-in-order](docs/rules/prefer-hooks-in-order.md)                 | Prefer having hooks in a consistent order                           |     |     |     |     |     |\n| [prefer-hooks-on-top](docs/rules/prefer-hooks-on-top.md)                     | Suggest having hooks before any test cases                          |     |     |     |     |     |\n| [prefer-lowercase-title](docs/rules/prefer-lowercase-title.md)               | Enforce lowercase test names                                        |     |     | 🔧  |     |     |\n| [prefer-mock-promise-shorthand](docs/rules/prefer-mock-promise-shorthand.md) | Prefer mock resolved/rejected shorthands for promises               |     |     | 🔧  |     |     |\n| [prefer-snapshot-hint](docs/rules/prefer-snapshot-hint.md)                   | Prefer including a hint with external snapshots                     |     |     |     |     |     |\n| [prefer-spy-on](docs/rules/prefer-spy-on.md)                                 | Suggest using `jest.spyOn()`                                        |     |     | 🔧  |     |     |\n| [prefer-strict-equal](docs/rules/prefer-strict-equal.md)                     | Suggest using `toStrictEqual()`                                     |     |     |     | 💡  |     |\n| [prefer-to-be](docs/rules/prefer-to-be.md)                                   | Suggest using `toBe()` for primitive literals                       | 🎨  |     | 🔧  |     |     |\n| [prefer-to-contain](docs/rules/prefer-to-contain.md)                         | Suggest using `toContain()`                                         | 🎨  |     | 🔧  |     |     |\n| [prefer-to-have-length](docs/rules/prefer-to-have-length.md)                 | Suggest using `toHaveLength()`                                      | 🎨  |     | 🔧  |     |     |\n| [prefer-todo](docs/rules/prefer-todo.md)                                     | Suggest using `test.todo`                                           |     |     | 🔧  |     |     |\n| [require-hook](docs/rules/require-hook.md)                                   | Require setup and teardown code to be within a hook                 |     |     |     |     |     |\n| [require-to-throw-message](docs/rules/require-to-throw-message.md)           | Require a message for `toThrow()`                                   |     |     |     |     |     |\n| [require-top-level-describe](docs/rules/require-top-level-describe.md)       | Require test cases and hooks to be inside a `describe` block        |     |     |     |     |     |\n| [valid-describe-callback](docs/rules/valid-describe-callback.md)             | Enforce valid `describe()` callback                                 | ✅  |     |     |     |     |\n| [valid-expect](docs/rules/valid-expect.md)                                   | Enforce valid `expect()` usage                                      | ✅  |     |     |     |     |\n| [valid-expect-in-promise](docs/rules/valid-expect-in-promise.md)             | Require promises that have expectations in their chain to be valid  | ✅  |     |     |     |     |\n| [valid-title](docs/rules/valid-title.md)                                     | Enforce valid titles                                                | ✅  |     | 🔧  |     |     |\n\n### Requires Type Checking\n\n| Name                                           | Description                                                  | 💼  | ⚠️  | 🔧  | 💡  | ❌  |\n| :--------------------------------------------- | :----------------------------------------------------------- | :-- | :-- | :-- | :-- | :-- |\n| [unbound-method](docs/rules/unbound-method.md) | Enforce unbound methods are called with their expected scope |     |     |     |     |     |\n\n<!-- end auto-generated rules list -->\n\nIn order to use the rules powered by TypeScript type-checking, you must be using\n`@typescript-eslint/parser` & adjust your eslint config as outlined\n[here](https://typescript-eslint.io/docs/linting/typed-linting).\n\nNote that unlike the type-checking rules in `@typescript-eslint/eslint-plugin`,\nthe rules here will fallback to doing nothing if type information is not\navailable, meaning it's safe to include them in shared configs that could be\nused on JavaScript and TypeScript projects.\n\nAlso note that `unbound-method` depends on `@typescript-eslint/eslint-plugin`,\nas it extends the original `unbound-method` rule from that plugin.\n\n## Credit\n\n- [eslint-plugin-mocha](https://github.com/lo1tuma/eslint-plugin-mocha)\n- [eslint-plugin-jasmine](https://github.com/tlvince/eslint-plugin-jasmine)\n\n## Related Projects\n\n### eslint-plugin-jest-extended\n\nThis is a sister plugin to `eslint-plugin-jest` that provides support for the\nmatchers provided by\n[`jest-extended`](https://github.com/jest-community/jest-extended).\n\n<https://github.com/jest-community/eslint-plugin-jest-extended>\n\n### eslint-plugin-jest-formatting\n\nThis project aims to provide formatting rules (auto-fixable where possible) to\nensure consistency and readability in jest test suites.\n\n<https://github.com/dangreenisrael/eslint-plugin-jest-formatting>\n\n### eslint-plugin-istanbul\n\nA set of rules to enforce good practices for Istanbul, one of the code coverage\ntools used by Jest.\n\n<https://github.com/istanbuljs/eslint-plugin-istanbul>\n\n[`no-deprecated-functions`]: docs/rules/no-deprecated-functions.md\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Jonathan Kim\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-plugin-jest/-/eslint-plugin-jest-27.1.7.tgz#0351e904afb8d66b7f70452929556dfdc8daba0d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-plugin-jest/-/eslint-plugin-jest-27.1.7.tgz",
    "hash": "0351e904afb8d66b7f70452929556dfdc8daba0d",
    "integrity": "sha512-0QVzf+og4YI1Qr3UoprkqqhezAZjFffdi62b0IurkCXMqPtRW84/UT4CKsYT80h/D82LA9avjO/80Ou1LdgbaQ==",
    "registry": "npm",
    "packageName": "eslint-plugin-jest",
    "cacheIntegrity": "sha512-0QVzf+og4YI1Qr3UoprkqqhezAZjFffdi62b0IurkCXMqPtRW84/UT4CKsYT80h/D82LA9avjO/80Ou1LdgbaQ== sha1-A1HpBK+41mt/cEUpKVVt/cjaug0="
  },
  "registry": "npm",
  "hash": "0351e904afb8d66b7f70452929556dfdc8daba0d"
}